#
type BatchPayload {
  # The number of nodes that have been affected by the Batch operation.
  count: Long!
}

# Raw JSON value
scalar Json

input MessageCreateInput {
  id: ID
  content: String!
  from: String!
  to: String!
}

type MessagePreviousValues {
  id: ID!
  content: String!
  from: String!
  to: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [MessageSubscriptionWhereInput!]

  # Logical OR on all given filters.
  OR: [MessageSubscriptionWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [MessageSubscriptionWhereInput!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  content: String
  from: String
  to: String
}

input MessageUpdateManyMutationInput {
  content: String
  from: String
  to: String
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createMessage(data: MessageCreateInput!): Message!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateMessage(
    data: MessageUpdateInput!
    where: MessageWhereUniqueInput!
  ): Message
  deleteUser(where: UserWhereUniqueInput!): User
  deleteMessage(where: MessageWhereUniqueInput!): Message
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  upsertMessage(
    where: MessageWhereUniqueInput!
    create: MessageCreateInput!
    update: MessageUpdateInput!
  ): Message!
  updateManyUsers(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): BatchPayload!
  updateManyMessages(
    data: MessageUpdateManyMutationInput!
    where: MessageWhereInput
  ): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

enum PrismaDatabase {
  default
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  password: String!
  imageUrl: String
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  imageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  # Logical AND on all given filters.
  AND: [UserSubscriptionWhereInput!]

  # Logical OR on all given filters.
  OR: [UserSubscriptionWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [UserSubscriptionWhereInput!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [MutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  imageUrl: String
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
  imageUrl: String
}

type AggregateMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

scalar DateTime

type Message implements Node {
  id: ID!
  content: String!
  from: String!
  to: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A connection to a list of items.
type MessageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

# An edge in a connection.
type MessageEdge {
  # The item at the end of the edge.
  node: Message!

  # A cursor for use in pagination.
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  from_ASC
  from_DESC
  to_ASC
  to_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MessageWhereInput {
  # Logical AND on all given filters.
  AND: [MessageWhereInput!]

  # Logical OR on all given filters.
  OR: [MessageWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [MessageWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  content: String

  # All values that are not equal to given value.
  content_not: String

  # All values that are contained in given list.
  content_in: [String!]

  # All values that are not contained in given list.
  content_not_in: [String!]

  # All values less than the given value.
  content_lt: String

  # All values less than or equal the given value.
  content_lte: String

  # All values greater than the given value.
  content_gt: String

  # All values greater than or equal the given value.
  content_gte: String

  # All values containing the given string.
  content_contains: String

  # All values not containing the given string.
  content_not_contains: String

  # All values starting with the given string.
  content_starts_with: String

  # All values not starting with the given string.
  content_not_starts_with: String

  # All values ending with the given string.
  content_ends_with: String

  # All values not ending with the given string.
  content_not_ends_with: String

  #
  from: String

  # All values that are not equal to given value.
  from_not: String

  # All values that are contained in given list.
  from_in: [String!]

  # All values that are not contained in given list.
  from_not_in: [String!]

  # All values less than the given value.
  from_lt: String

  # All values less than or equal the given value.
  from_lte: String

  # All values greater than the given value.
  from_gt: String

  # All values greater than or equal the given value.
  from_gte: String

  # All values containing the given string.
  from_contains: String

  # All values not containing the given string.
  from_not_contains: String

  # All values starting with the given string.
  from_starts_with: String

  # All values not starting with the given string.
  from_not_starts_with: String

  # All values ending with the given string.
  from_ends_with: String

  # All values not ending with the given string.
  from_not_ends_with: String

  #
  to: String

  # All values that are not equal to given value.
  to_not: String

  # All values that are contained in given list.
  to_in: [String!]

  # All values that are not contained in given list.
  to_not_in: [String!]

  # All values less than the given value.
  to_lt: String

  # All values less than or equal the given value.
  to_lte: String

  # All values greater than the given value.
  to_gt: String

  # All values greater than or equal the given value.
  to_gte: String

  # All values containing the given string.
  to_contains: String

  # All values not containing the given string.
  to_not_contains: String

  # All values starting with the given string.
  to_starts_with: String

  # All values not starting with the given string.
  to_not_starts_with: String

  # All values ending with the given string.
  to_ends_with: String

  # All values not ending with the given string.
  to_not_ends_with: String

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

input MessageWhereUniqueInput {
  id: ID
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  users(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User]!
  messages(
    where: MessageWhereInput
    orderBy: MessageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Message]!
  user(where: UserWhereUniqueInput!): User
  message(where: MessageWhereUniqueInput!): Message
  usersConnection(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UserConnection!
  messagesConnection(
    where: MessageWhereInput
    orderBy: MessageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): MessageConnection!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  password: String!
  imageUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  imageUrl_ASC
  imageUrl_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  # Logical AND on all given filters.
  AND: [UserWhereInput!]

  # Logical OR on all given filters.
  OR: [UserWhereInput!]

  # Logical NOT on all given filters combined by AND.
  NOT: [UserWhereInput!]

  #
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID

  #
  username: String

  # All values that are not equal to given value.
  username_not: String

  # All values that are contained in given list.
  username_in: [String!]

  # All values that are not contained in given list.
  username_not_in: [String!]

  # All values less than the given value.
  username_lt: String

  # All values less than or equal the given value.
  username_lte: String

  # All values greater than the given value.
  username_gt: String

  # All values greater than or equal the given value.
  username_gte: String

  # All values containing the given string.
  username_contains: String

  # All values not containing the given string.
  username_not_contains: String

  # All values starting with the given string.
  username_starts_with: String

  # All values not starting with the given string.
  username_not_starts_with: String

  # All values ending with the given string.
  username_ends_with: String

  # All values not ending with the given string.
  username_not_ends_with: String

  #
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String

  #
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String

  #
  imageUrl: String

  # All values that are not equal to given value.
  imageUrl_not: String

  # All values that are contained in given list.
  imageUrl_in: [String!]

  # All values that are not contained in given list.
  imageUrl_not_in: [String!]

  # All values less than the given value.
  imageUrl_lt: String

  # All values less than or equal the given value.
  imageUrl_lte: String

  # All values greater than the given value.
  imageUrl_gt: String

  # All values greater than or equal the given value.
  imageUrl_gte: String

  # All values containing the given string.
  imageUrl_contains: String

  # All values not containing the given string.
  imageUrl_not_contains: String

  # All values starting with the given string.
  imageUrl_starts_with: String

  # All values not starting with the given string.
  imageUrl_not_starts_with: String

  # All values ending with the given string.
  imageUrl_ends_with: String

  # All values not ending with the given string.
  imageUrl_not_ends_with: String

  #
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime

  #
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

# The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
scalar Long
